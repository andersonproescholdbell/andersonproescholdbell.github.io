---
// Enhanced Wordle - faithful port of AKordle
import { dict5 } from '../../../scripts/wordle-shared-dictionary.js';
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        
        <title>Enhanced Wordle</title>
        
        <meta name="author" content="Anderson P">
        <meta name="description" content="Enhanced Wordle with advanced features">
        <meta name="keywords" content="enhanced wordle game">
        
        <style>
            /* AKordle styles will be inserted here */
            :root {
                --rows: 6;
                --cols: 5;
            }

            * {
                box-sizing: border-box;
            } 

            html, body, #main {
                margin: 0;
                padding: 0;
                width: 100vw;
                height: 100vh;
                background-color: #121213;
                overflow: hidden;
            }

            /* Navigation styles - positioned to not overlap header */
            .nav-header {
                position: absolute;
                top: 70px;
                left: 20px;
                z-index: 500;
            }
            
            .nav-header a {
                color: #ffffff;
                text-decoration: none;
                font-size: 14px;
                opacity: 0.8;
                background-color: rgba(0,0,0,0.3);
                padding: 5px 10px;
                border-radius: 3px;
            }
            
            .nav-header a:hover {
                opacity: 1;
                background-color: rgba(0,0,0,0.5);
            }

            /* Simplified header for static version */
            header.row {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px 20px;
                background-color: #121213;
                color: white;
                border-bottom: 1px solid #3a3a3c;
                height: 60px;
                position: relative;
                z-index: 1000;
            }

            #left, #right {
                display: flex;
                flex-direction: row;
                gap: 15px;
                z-index: 1100;
                position: relative;
            }

            #left img, #right img {
                width: 24px;
                height: 24px;
                cursor: pointer;
                opacity: 0.8;
            }

            #left img:hover, #right img:hover {
                opacity: 1;
            }

            .settings-btn {
                background: none;
                border: none;
                cursor: pointer;
                padding: 0;
                z-index: 1200;
                position: relative;
            }

            #site {
                color: white;
                margin: 0;
                font-size: 2rem;
                font-weight: bold;
                text-align: center;
            }

            #panel {
                display: none;
                position: absolute;
                top: 60px;
                left: 20px;
                background-color: #232323;
                border: 1px solid #3a3a3c;
                border-radius: 5px;
                padding: 20px;
                flex-direction: column;
                gap: 15px;
                color: white;
                z-index: 1300;
                box-shadow: 0 4px 12px rgba(0,0,0,0.5);
            }

            #panel.show {
                display: flex;
            }

            /* Continue with AKordle CSS... */
            
            /* Media queries for responsive design */
            @media only screen and (max-width: 600px) {
                #keyboard {
                    width: 100%;
                }
            } 

            @media only screen and (max-height: 500px) {
                #keyboard {
                    height: 112px;
                }

                .key {
                    height: 30px;
                }

                .box {
                    max-height: calc((100vh / var(--rows)) - (212px / var(--rows)));
                    max-width: calc((100vh / var(--rows)) - (212px / var(--rows)));
                }
            }

            @media only screen and (min-width: 600px) {
                #keyboard {
                    width: 600px;
                }
            } 

            @media only screen and (min-height: 500px) {
                #keyboard {
                    height: 160px;
                }

                .key {
                    height: 46px;
                }

                .box {
                    max-height: calc((100vh / var(--rows)) - (260px / var(--rows)));
                    max-width: calc((100vh / var(--rows)) - (260px / var(--rows)));
                }
            }

            @media only screen and (min-width: 1000px) {
                #boxes-con {
                    width: 600px;
                }

                #keyboard {
                    width: 700px;
                }
            } 

            @media only screen and (min-height: 750px) {
                #keyboard {
                    height: 220px;
                }

                .key {
                    height: 66px;
                }

                .box {
                    max-height: calc((100vh / var(--rows)) - (320px / var(--rows)));
                    max-width: calc((100vh / var(--rows)) - (320px / var(--rows)));
                }
            }

            @media only screen and (min-width: 2000px) {
                #boxes-con {
                    width: 800px;
                }

                #keyboard {
                    width: 800px;
                }
            }  

            @media only screen and (min-height: 925px) {
                #keyboard {
                    height: 250px;
                }

                .key {
                    height: 76px;
                }

                .box {
                    max-height: calc((100vh / var(--rows)) - (350px / var(--rows)));
                    max-width: calc((100vh / var(--rows)) - (350px / var(--rows)));
                }
            }

            @media only screen and (min-height: 1100px) {
                #keyboard {
                    height: 310px;
                }

                .key {
                    height: 96px;
                }

                .box {
                    max-height: calc((100vh / var(--rows)) - (410px / var(--rows)));
                    max-width: calc((100vh / var(--rows)) - (410px / var(--rows)));
                }
            }

            .row {
                display: flex;
                flex-direction: row;
                width: 100%;
                margin: initial;
            }

            .row > * {
                width: initial;
                padding: initial;
            }

            .center {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .flex-1 {
                display: flex;
                flex: 1;
            }

            #main {
                display: flex;
                flex-direction: column;
                align-items: center;
            }

            #boxes-con {
                display: flex;
                justify-content: center;
                align-items: center;
                flex-grow: 1;
                width: 100%;
            }

            #boxes {
                width: 100%;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                display: flex;
            }

            div.row {
                justify-content: center;
            }

            .box {
                box-sizing: border-box;
                border: 2px solid #3a3a3c;
                background-color: #121213;
                aspect-ratio: 1;
                flex: 1;
                margin: 2px;
                text-align: center;
                font-weight: bold;
                font-size: 2rem;
                color: white;
                display: flex;
                justify-content: center;
                align-items: center;
                text-transform: uppercase;
                transition: all 0.15s ease;
            }

            /* Box states */
            .box.filled:not(.final) {
                background-color: #1a1a1b;
                border-color: #565758;
                color: white;
            }

            #keyboard {
                flex-direction: column;
                display: flex;
                align-items: center;
            }

            .key {
                flex: 1;
                font-weight: bold;
                border-radius: 5px;
                text-align: center;
                background-color: rgb(90, 90, 90);
                margin: 2px;
                border: 0;
                color: white;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1rem;
            }

            .spacer {
                flex: 0.5;
            }

            .flex-1-5 {
                flex: 1.5;
                font-size: 12px;
            }

            .key:hover {
                filter: brightness(110%);
            }

            /* Keyboard color states */
            .key.grey {
                background-color: #787c7e;
                color: white;
            }

            .key.orange {
                background-color: #c9b458;
                color: white;
            }

            .key.green {
                background-color: #6aaa64;
                color: white;
            }

            .box.final {
                border-color: transparent;
                color: white;
                font-weight: bold;
            }

            .box.grey {
                background-color: #787c7e;
                border-color: #787c7e;
                color: white;
            }

            .box.orange {
                background-color: #c9b458;
                border-color: #c9b458;
                color: white;
            }

            .box.green {
                background-color: #6aaa64;
                border-color: #6aaa64;
                color: white;
            }

            #winPanel {
                display: none;
                position: absolute;
                top: 35%;
                left: 50%;
                transform: translate(-50%, -50%);
                background-color: #232323;
                opacity: 97%;
                flex-direction: column;
                border-radius: 5%;
                padding: 20px;
                color: white;
                text-align: center;
                border: 2px solid #949494;
                align-items: center;
                z-index: 2000;
            }

            #winPanel h2, #winPanel h3 {
                margin: 10px 0;
            }

            .btn {
                padding: 8px 16px;
                margin: 5px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
            }

            .btn-light {
                background-color: #f8f9fa;
                color: #212529;
            }

            .btn-primary {
                background-color: #0d6efd;
                color: white;
            }

            .btn:hover {
                filter: brightness(110%);
            }

            .d-flex {
                display: flex;
            }

            .flex-row {
                flex-direction: row;
            }

            .m-2 {
                margin: 8px;
            }

            .text-center {
                text-align: center;
            }

            .mb-0 {
                margin-bottom: 0;
            }

            #rangeLength {
                color: white;
                font-size: 14px;
            }

            #range {
                width: 100%;
                margin: 10px 0;
            }

            /* Simple button styling for settings */
            .settings-btn {
                background: none;
                border: none;
                cursor: pointer;
                padding: 0;
            }
        </style>
    </head>  

    <body>
        <div class="nav-header">
            <a href="/games/">← Back to Games</a>
        </div>

        <div id="main">
            <!-- Simplified header without PHP -->
            <header class="row">
                <div id="left" class="d-flex flex-row">
                    <button class="settings-btn" id="settings">
                        <!-- Settings SVG -->
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">
                            <circle cx="12" cy="12" r="3"></circle>
                            <path d="m12 1 0 6m0 6 0 6"></path>
                            <path d="m15.4 6a9 9 0 0 1 0 12"></path>
                            <path d="m8.6 6a9 9 0 0 0 0 12"></path>
                        </svg>
                    </button>

                    <button class="settings-btn" id="hint">
                        <!-- Question SVG -->
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <path d="m9,9a3,3 0 1,1 6,0c0,2 -3,3 -3,3"></path>
                            <path d="m12 17 .01 0"></path>
                        </svg>
                    </button>
                </div>
                
                <h1 id="site">Enhanced Wordle</h1>
                
                <div id="right" class="d-flex flex-row">
                    <button class="settings-btn" id="stats">
                        <!-- Stats SVG -->
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2">
                            <path d="M3 3v18h18"></path>
                            <path d="m19 9-5 5-4-4-3 3"></path>
                        </svg>
                    </button>
                </div>
            </header>

            <div id="panel" class="flex-column">
                <p id="rangeLength" class="text-center mb-0">Word Length - 5</p>
                <input type="range" id="range" min="3" max="8" step="1" value="5">
                <button id="newGame" class="btn btn-primary">Start New Game</button>
            </div>

            <div id="boxes-con">
                <div id="boxes"></div>
            </div>

            <div id="keyboard"></div>
        </div>

        <div id="winPanel">
            <h2 id="winPanelText"></h2>
            <h3 id="winPanelWord"></h3>
            <h3 id="winPanelScore"></h3>
            <div class="d-flex flex-row">
                <button id="hideWinPanel" class="btn btn-light m-2">Hide Panel</button>
                <button id="newGame2" class="btn btn-primary m-2">Start New Game</button>
            </div>
        </div>

        <script define:vars={{dict5}}>
        // Dictionary setup
        const wordDict = dict5;
        
        // Game state variables
        let currentGame = null;
        let gameStats = null;

        // Faithful port of AKordle game logic
        function createRows(rows, cols) {
            const boxes = document.getElementById('boxes');
            boxes.innerHTML = ''; // Clear existing
            
            for (let i = 0; i < rows; i++) {
                let r = document.createElement('div');
                r.className = 'row';
                for (let j = 0; j < cols; j++) {
                    let box = document.createElement('div');
                    box.className = 'box';
                    r.appendChild(box);
                }
                boxes.appendChild(r);
            }
        }

        function createKey(l) {
            let key = document.createElement('button');
            key.className = 'key';
            key.innerHTML = l;
            key.setAttribute('data-key', l);
            return key;
        }

        function createEnter() {
            let enter = document.createElement('button');
            enter.className = 'key flex-1-5';
            enter.innerHTML = 'ENTER';
            enter.setAttribute('data-func', 'enter');
            enter.addEventListener('click', submitGuess);
            return enter;
        }

        function createBack() {
            let back = document.createElement('button');
            back.className = 'key flex-1-5';
            back.innerHTML = 'BACK';
            back.setAttribute('data-func', 'back');
            back.addEventListener('click', removeLetter);
            return back;
        }

        function createKeys(s, spaces, functions) {
            let row = document.createElement('div');
            row.className = 'row flex-1';
            
            if (spaces) {
                let spacer = document.createElement('div');
                spacer.className = 'spacer';
                row.appendChild(spacer);
            }
            
            if (functions) row.appendChild(createEnter());

            for (let l of s) {
                let key = createKey(l);
                key.addEventListener('click', () => addLetter(l));
                row.appendChild(key);
            }

            if (functions) row.appendChild(createBack());
            
            if (spaces) {
                let spacer = document.createElement('div');
                spacer.className = 'spacer';
                row.appendChild(spacer);
            }

            document.getElementById('keyboard').appendChild(row);
        }

        function createKeyboard() {
            const keyboard = document.getElementById('keyboard');
            keyboard.innerHTML = ''; // Clear existing
            
            createKeys('QWERTYUIOP', false);
            createKeys('ASDFGHJKL', true);
            createKeys('ZXCVBNM', false, true);
        }

        function updateRowsCols(rows, cols) {
            document.documentElement.style.setProperty('--cols', cols);
            document.documentElement.style.setProperty('--rows', rows);
        }

        function getRows() {
            return parseInt(getComputedStyle(document.documentElement).getPropertyValue('--rows')) || 6;
        }

        function getCols() {
            return parseInt(getComputedStyle(document.documentElement).getPropertyValue('--cols')) || 5;
        }

        function addLetter(letter) {
            if (typeof letter !== 'string') {
                letter = letter.getAttribute('data-key');
            }
            
            const filled = document.querySelectorAll('.filled');
            const final = document.querySelectorAll('.final');
            
            if (filled.length - final.length < getCols()) {
                const boxes = document.querySelectorAll('.box');
                boxes[filled.length].textContent = letter;
                boxes[filled.length].classList.add('filled');
            }
        }

        function removeLetter() {
            const filled = document.querySelectorAll('.filled');
            const final = document.querySelectorAll('.final');
            
            if (filled.length > final.length) {
                const lastFilled = filled[filled.length - 1];
                lastFilled.textContent = '';
                lastFilled.classList.remove('filled');
            }
        }

        function getGuess() {
            const filled = document.querySelectorAll('.filled');
            const final = document.querySelectorAll('.final');
            
            let guess = '';
            for (let i = final.length; i < filled.length; i++) {
                guess += filled[i].textContent;
            }
            return guess.toLowerCase();
        }

        function updateTile(className) {
            const filled = document.querySelectorAll('.filled');
            const final = document.querySelectorAll('.final');
            
            if (filled.length > final.length) {
                filled[final.length].classList.add(className);
                filled[final.length].classList.add('final');
            }
        }

        function winPanel(data) {
            const winPanelText = document.getElementById('winPanelText');
            const winPanelWord = document.getElementById('winPanelWord');
            const winPanelScore = document.getElementById('winPanelScore');
            
            if (data.over === 'win') {
                winPanelText.textContent = `You WON in ${data.guesses} guesses`;
                winPanelText.style.color = 'green';
            } else {
                winPanelText.textContent = `You LOST in ${data.guesses} guesses`;
                winPanelText.style.color = 'red';
            }

            winPanelWord.textContent = `Correct word: ${data.word}`;
            winPanelScore.textContent = `Score: ${data.score}`;

            document.getElementById('winPanel').style.display = 'flex';
        }

        function updateKeyboard() {
            for (let className of ['grey', 'orange', 'green']) {
                const tiles = document.querySelectorAll(`.${className}`);
                for (let tile of tiles) {
                    const letter = tile.textContent.toUpperCase();
                    const key = document.querySelector(`[data-key="${letter}"]`);
                    if (key && !key.classList.contains(className)) {
                        key.classList.add(className);
                    }
                }
            }
        }

        function guessResponse(data) {
            if (data.bad) {
                alert("This word does not exist in the dictionary");
                return;
            }

            const total = data.grey.length + data.orange.length + data.green.length;

            if (data.over) {
                disableInput();

                setTimeout(() => {
                    winPanel(data);
                }, (total + 2) * 300);    
            }

            for (let i = 0; i < total; i++) {
                if (data.grey.includes(i)) {
                    setTimeout(() => updateTile('grey'), i * 300);
                } else if (data.orange.includes(i)) {
                    setTimeout(() => updateTile('orange'), i * 300);
                } else if (data.green.includes(i)) {
                    setTimeout(() => updateTile('green'), i * 300);
                }

                if (i === total - 1) {
                    setTimeout(() => updateKeyboard(), i * 301);
                }
            }
        }

        function submitGuess() {
            const filled = document.querySelectorAll('.filled');
            const final = document.querySelectorAll('.final');
            
            if (filled.length - final.length === getCols()) {
                const guess = getGuess();
                
                if (!wordDict.includes(guess)) {
                    guessResponse({ bad: true });
                    return;
                }

                // Process guess
                processGuess(guess);
            }
        }

        function processGuess(guess) {
            if (!currentGame || !currentGame.word) return;
            
            const word = currentGame.word;
            const cols = getCols();
            
            let grey = [];
            let orange = [];
            let green = [];
            
            // More faithful Wordle algorithm
            const letterCounts = {};
            for (let char of word) {
                letterCounts[char] = (letterCounts[char] || 0) + 1;
            }
            
            // First pass: mark exact matches
            const tempLetterCounts = { ...letterCounts };
            for (let i = 0; i < cols; i++) {
                if (word[i] === guess[i]) {
                    green.push(i);
                    tempLetterCounts[guess[i]]--;
                }
            }
            
            // Second pass: mark partial matches
            for (let i = 0; i < cols; i++) {
                if (word[i] !== guess[i]) { // Not exact match
                    if (tempLetterCounts[guess[i]] > 0) {
                        orange.push(i);
                        tempLetterCounts[guess[i]]--;
                    } else {
                        grey.push(i);
                    }
                }
            }
            
            // Save guess to game state
            if (!currentGame.guesses) currentGame.guesses = [];
            currentGame.guesses.push({
                word: guess,
                result: { grey, orange, green }
            });
            
            const guessCount = currentGame.guesses.length;
            const gameOver = guess === word || guessCount >= getRows();
            const won = guess === word;
            
            const responseData = {
                grey,
                orange, 
                green,
                over: gameOver ? (won ? 'win' : 'loss') : false,
                guesses: guessCount,
                word: word,
                score: won ? (getRows() - guessCount + 1) * 100 : 0
            };
            
            if (gameOver) {
                currentGame.completed = true;
                updateStats(won);
            }
            saveGameState();
            
            guessResponse(responseData);
        }

        function enableInput() {
            document.addEventListener('keyup', handleKeyPress);
            
            // Key click handlers are already added in createKeys
        }

        function disableInput() {
            document.removeEventListener('keyup', handleKeyPress);
        }

        function handleKeyPress(e) {
            if (e.code === 'Enter') {
                submitGuess();
            } else if (e.code === 'Backspace') {
                removeLetter();
            } else if (e.key.toLowerCase().match(/^[a-z]$/)) {
                addLetter(e.key.toUpperCase());
            }
        }

        function newGame() {
            const cols = getCols();
            const rows = getRows();
            
            // Generate random word of correct length
            const wordsOfLength = wordDict.filter(word => word.length === cols);
            const word = wordsOfLength[Math.floor(Math.random() * wordsOfLength.length)];
            
            currentGame = {
                word: word,
                guesses: [],
                rows: rows,
                cols: cols,
                completed: false
            };
            
            createGame();
            saveGameState();
        }

        function restoreGameState() {
            if (!currentGame || !currentGame.guesses) return;
            
            const boxes = document.querySelectorAll('.box');
            let boxIndex = 0;
            
            // Restore each previous guess
            for (let guessData of currentGame.guesses) {
                const guess = guessData.word;
                const result = guessData.result;
                
                // Fill the boxes with letters
                for (let i = 0; i < guess.length; i++) {
                    boxes[boxIndex].textContent = guess[i].toUpperCase();
                    boxes[boxIndex].classList.add('filled', 'final');
                    
                    // Apply colors based on result
                    if (result.green.includes(i)) {
                        boxes[boxIndex].classList.add('green');
                    } else if (result.orange.includes(i)) {
                        boxes[boxIndex].classList.add('orange');
                    } else if (result.grey.includes(i)) {
                        boxes[boxIndex].classList.add('grey');
                    }
                    
                    boxIndex++;
                }
            }
            
            // Update keyboard colors
            updateKeyboard();
            
            // If game is completed, disable input
            if (currentGame.completed) {
                disableInput();
            }
        }

        function createGame() {
            const rows = getRows();
            const cols = getCols();
            
            updateRowsCols(rows, cols);

            createRows(rows, cols);
            createKeyboard();

            disableInput();
            enableInput();
        }

        function saveGameState() {
            localStorage.setItem('enhanced-wordle-game', JSON.stringify(currentGame));
        }

        function loadGameState() {
            const saved = localStorage.getItem('enhanced-wordle-game');
            return saved ? JSON.parse(saved) : null;
        }

        function updateStats(won) {
            let stats = JSON.parse(localStorage.getItem('enhanced-wordle-stats') || '{"played": 0, "won": 0, "streak": 0, "maxStreak": 0}');
            
            stats.played++;
            if (won) {
                stats.won++;
                stats.streak++;
                stats.maxStreak = Math.max(stats.maxStreak, stats.streak);
            } else {
                stats.streak = 0;
            }
            
            localStorage.setItem('enhanced-wordle-stats', JSON.stringify(stats));
            gameStats = stats;
        }

        function loadStats() {
            const stats = localStorage.getItem('enhanced-wordle-stats');
            return stats ? JSON.parse(stats) : { played: 0, won: 0, streak: 0, maxStreak: 0 };
        }

        // Initialize everything when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            // Event handlers
            document.getElementById('hideWinPanel').addEventListener('click', () => {
                document.getElementById('winPanel').style.display = 'none';
            });

            document.getElementById('newGame2').addEventListener('click', () => {
                document.getElementById('winPanel').style.display = 'none';
                newGame();
            });

            document.getElementById('newGame').addEventListener('click', () => {
                document.getElementById('panel').classList.remove('show');
                newGame();
            });

            document.getElementById('settings').addEventListener('click', () => {
                const panel = document.getElementById('panel');
                panel.classList.toggle('show');
            });

            document.getElementById('range').addEventListener('input', (e) => {
                const value = e.target.value;
                document.getElementById('rangeLength').textContent = `Word Length - ${value}`;
                document.documentElement.style.setProperty('--cols', value);
                
                // Check if we have words of this length
                const wordsOfLength = wordDict.filter(word => word.length === parseInt(value));
                if (wordsOfLength.length === 0) {
                    document.getElementById('rangeLength').textContent = `Word Length - ${value} (No words available)`;
                }
            });

            document.getElementById('stats').addEventListener('click', () => {
                const stats = loadStats();
                const winRate = stats.played > 0 ? Math.round((stats.won / stats.played) * 100) : 0;
                alert(`Games Played: ${stats.played}\nWin Rate: ${winRate}%\nCurrent Streak: ${stats.streak}\nMax Streak: ${stats.maxStreak}`);
            });

            document.getElementById('hint').addEventListener('click', () => {
                if (currentGame && currentGame.word) {
                    const randomIndex = Math.floor(Math.random() * currentGame.word.length);
                    alert(`Hint: The letter at position ${randomIndex + 1} is '${currentGame.word[randomIndex].toUpperCase()}'`);
                } else {
                    alert('Start a game first to get a hint!');
                }
            });

            // Initialize game
            gameStats = loadStats();
            currentGame = loadGameState();
            
            if (currentGame && !currentGame.completed) {
                updateRowsCols(currentGame.rows, currentGame.cols);
                createGame();
                restoreGameState();
            } else {
                newGame();
            }
        });
        </script>
    </body>
</html>